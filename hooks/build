#!/bin/bash

# Autobuild the Image on Docker Hub with advanced options and buildx for multiarch images
# read more: https://github.com/Tob1asDocker/dockerhubhooksexample

# '--push' shorthand for '--output=type=registry'

set -x

# DEP 2/29/24: Pushing to the local registry can fail for PR from a forked repo.
# The original script I copied does the push to docker hub here, and makes
# the push script a no-op.  This is not ideal, but harmless with the 'this' tag.
#
# Unfortunately, when someone creates a PR from a forked repo, this
# push fails with a credential issue.  Probably a good idea for
# security, but also causes the build test to fail.
#
# This step pushes to a local registry during build.
#
# If anyone wants to change this in the future, be aware during
# testing.  The old behavior (pushing directly to docker hub) works
# just fine on a PR from a local branch.

# For this script, set the repo to localhost
OLD_IMAGE_NAME=${IMAGE_NAME}
DOCKER_REPO=`echo ${DOCKER_REPO} | sed -e "s/index.docker.io/localhost:5000/"`
DOCKER_IMAGE=`echo ${DOCKER_IMAGE} | sed -e "s/index.docker.io/localhost:5000/"`
IMAGE_NAME=`echo ${IMAGE_NAME} | sed -e "s/index.docker.io/localhost:5000/"`

cat /etc/hosts

echo "### RUN build START: using buildx ###"
echo "Image Name: ${IMAGE_NAME} (${DOCKER_IMAGE}) (Repo: ${DOCKER_REPO}, Tag: ${DOCKER_TAG})"
echo "Dockerfile Path/Name: ${DOCKERFILE_PATH}"
BUILDPLATFORM="${BUILDPLATFORM:-"linux/amd64,linux/arm64"}"
echo "Architectures=${BUILDPLATFORM}"

echo "Starting registry"

# Start the local registry
docker run --net host -d --rm --name registry registry:2

# Build
docker buildx build --build-arg BUILD_DATE="$(date -u +'%Y-%m-%dT%H:%M:%SZ')" --build-arg VCS_REF="$(git rev-parse --short HEAD)" --tag "${IMAGE_NAME}" --platform "${BUILDPLATFORM}" --file "${DOCKERFILE_PATH}" --push .

# Tag the local version so that we can push in the push script, should we choose
docker tag ${IMAGE_NAME} ${OLD_IMAGE_NAME}

docker logs -f registry

# Confirm the build really was both archs
#docker buildx inspect

echo "### RUN build END"
